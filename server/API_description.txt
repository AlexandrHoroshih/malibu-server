APIPostSession
	Request
		type ReqPostSession struct {
			SessionParams string // "-HostName=http://someinstance.com"
			ZipFileBase64 string
		}

	Response
		Header.Location contains session ID.
		Status 201 (created)
		Empty body.

	Server-side actions:
		Generate sessionID.
		Save zip file to "./sessions/"+sessionName+"/archived.zip"
		Add new record to Sessions (id,SessionParams)
		Stop current session: Mark all unfinished cases as finished and failed.
		Send response
		Run async: session cases exploring 
			unzip archive
			run "combat" binary for tests. get list of cases, or get error message if sometihg wrong.
			combat exit code == 0 {
				Insert records into Cases
				run async: delete old sessions.
			}else{
				Set "cases_exploring_fail_message" for the session. It is combat's stdOut.
			}




APIGetJob
	Request
		Empty body
	Response
		type ResGetJob struct {
			CaseID        string
			CaseCMD       string
			ZipFileBase64 string
		}
		Status 200

	Server-side actions:
		Select random case which ready for running (finished=false AND in_progress=false).
		Found?{
			Set for the case: in_progress=true, started_at=now
			Read zip file
			Send response with status 200.
		}else{
			send response status 404 (not found), with empty body
		}



APIGetSessionStatus
	Request
		Empty body
	Response
		type ResGetSession struct {
			Finished                  bool
			TotalCasesCount           int
			FinishedCasesCount        int
			CasesExploringFailMessage string
			FailReports               []string
		}
		Status 200

	Server-side actions:
		Select required response values from DB. No server state changes.






APIPostCaseResult
	Request
		type ReqPostCaseResult struct {
			CaseID        string
			ExitStatus    string
			StdOut        string
			ZipFileBase64 string //"out" folder of test. Contains screenshots, page sources, urls.
		}
	Response
		Empty body
		Status 200
	Server-side actions:
		stdOut is false-neg error?{
			Set for case "in_progress=false"
			Return 200
		}else{
			Get count of tries for the case
			Insert try with values: case_id, exit_status, std_out
			if exitStatus ==0{
				Mark case as Passed (in_progress=false, passed=true, finished=true)
			}else{
				is too many tries?{
					mark case as Failed (in_progress=false, passed=false, finished=true)
				}else{
					mark case as ready for running (in_progress=false)
				}
				save and unzip try's artifacts to "./tries/"+tryID
			}
		}








